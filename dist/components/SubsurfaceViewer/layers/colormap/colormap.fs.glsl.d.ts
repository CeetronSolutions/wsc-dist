declare const fsColormap = "#define SHADER_NAME colormap-shader\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D bitmapTexture; // Property map\nuniform sampler2D colormap;\n\nuniform float opacity;\n\nvoid main(void) {\n  vec4 bitmapColor = texture2D(bitmapTexture, vTexCoord);\n\n  // If it's a picking pass, we just return the raw property map value.\n  if (picking_uActive) {\n    gl_FragColor = bitmapColor;\n    return;\n  }\n\n  // Decode the RGB value into a float. See decoder.fs.glsl for more details.\n  float val = decode_rgb2float(bitmapColor.rgb);\n  // The resulting val will be in [0, 1] interval, so we can use it directly as a texture coord\n  // to sample from the colormap.\n  // 0 => Leftmost color in the colormap, 1 => rightmost color, linearly interpolated in between.\n  vec4 color = texture2D(colormap, vec2(val, 0.5));\n\n  // The final pixel opacity is the combination of the user provided image-wide opacity,\n  // the colormap opacity at the sampled pixel and the property map opacity of the sampled pixel.\n  gl_FragColor = vec4(color.rgb, color.a * bitmapColor.a * opacity);\n\n  // Support for existing functionality that comes from the BitmapLayer, such as desaturate, tintColor etc.\n  // See https://deck.gl/docs/api-reference/layers/bitmap-layer#render-options for more details.\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n\n}\n";
export default fsColormap;
